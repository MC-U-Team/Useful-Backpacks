buildscript {
	repositories {
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
			url = "https://maven.parchmentmc.org"
		}
		maven {
			url = "https://repo.u-team.info"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
		classpath group: "org.parchmentmc", name: "librarian", version: "1.+", changing: true
		classpath group: "info.u-team.curse_gradle_uploader", name: "curse_gradle_uploader", version: "1.4.1"
	}
}

apply from: "gradle_files/default-project-fg-5.groovy"

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.parchmentmc.librarian.forgegradle"
apply plugin: "eclipse"
apply plugin: "info.u_team.curse_gradle_uploader"
apply plugin: "maven-publish"

group = "info.u-team"
archivesBaseName = generateArchivesBaseName()
version = generateVersion()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(16)
	}
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	runs {
		client = {
			workingDirectory file("run/client")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		server = {
			workingDirectory file("run/server")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		data = {
			workingDirectory file("run/data")
			
			args "--mod", config.mod.modid
			args "--all"
			args "--output", file("src/generated/resources")
			args "--validate"
			args "--existing", file("src/main/resources")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
	}
}

jar {
	archiveClassifier = ""
	
	from "LICENSE"
	
	exclude ".cache"
	
	manifest normalManifest
}

task deobfJar(type: Jar) {
	archiveClassifier = "dev"
	
	from sourceSets.main.output
	from "LICENSE"
	
	exclude ".cache"
	
	manifest normalManifest
}

task sourcesJar(type: Jar) {
	archiveClassifier = "sources"
	
	from sourceSets.main.allJava
	from "LICENSE"
}

task docJar(type: Jar) {
	archiveClassifier = "javadoc"
	
	from javadoc
	from "LICENSE"
	
	tasks.withType(Javadoc) {
		options.addStringOption("Xdoclint:none", "-quiet")
		options.addStringOption("encoding", "UTF-8")
		options.addStringOption("charSet", "UTF-8")
	}
}

artifacts {
	archives jar
	archives deobfJar
	archives sourcesJar
	archives docJar
}

signAllJars()

sourceSets {
	main {
		java {
			srcDirs += "src/data/java"
			srcDirs += "src/api/java"
			srcDirs += "src/integration/java"
		}
		resources {
			srcDirs += "src/generated/resources"
		}
	}
}

repositories {
	maven {
		url = "https://dvs1.progwml6.com/files/maven"
	}
	maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
	minecraft "net.minecraftforge:forge:1.17.1-37.0.112"
	compileOnly "info.u-team:u_team_core-1.17.1:4.0.0.199"
	compileOnly fg.deobf("mezz.jei:jei-1.17.1:8.1.0.31:api")
	runtimeOnly fg.deobf("mezz.jei:jei-1.17.1:8.1.0.31")
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.17.1-5.0.1.0:api")
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.17.1-5.0.1.0")
}

curseforge {
	afterEvaluate {
		tasks."curseforge${config.curse.id}".onlyIf {
			getValue("token") != null
		}
	}
	
	tasks.curseforge.dependsOn build
	
	apiKey = getValueDefault("token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.forge.mcversion
		addGameVersion "Forge"
		addGameVersion "Java 16"
		
		relations {
			requiredDependency "u-team-core"
			optionalDependency "jei"
			optionalDependency "curios"
		}
		
		mainArtifact(jar) {
			displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${generateChangelogUrl()}\">Changelog of ${project.version}</a>"
		}
		
		addArtifact(deobfJar) {
			displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}-dev"
			changelogType = "text"
			changelog = "ONLY for development environment!\nMappings: ${config.forge.mapping_channel}_${config.forge.mapping}"
		}
	}
}

tasks.withType(PublishToMavenRepository) {
	onlyIf {
		getValue("mavenpass") != null
	}
}

publishing {
	publish.dependsOn build
	
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = getValue("mavenpass")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact deobfJar
			artifact sourcesJar
			artifact docJar
			
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
				}
			}
		}
	}
}

task uploadBoth {
	tasks.uploadBoth.dependsOn build
	tasks.uploadBoth.dependsOn publish
	tasks.uploadBoth.dependsOn "curseforge${config.curse.id}"
	tasks.uploadBoth.dependsOn setBuildNumber
	tasks.uploadBoth.dependsOn tagRelease
	doLast {
		println "Published both"
	}
}

gradle.taskGraph.whenReady {
	if (gradle.taskGraph.hasTask(":curseforge${config.curse.id}") || gradle.taskGraph.hasTask(":publish")) {
		validateBuild()
	}
}