plugins {
	id "net.minecraftforge.gradle"
	id "org.parchmentmc.librarian.forgegradle"
	id "org.spongepowered.mixin"
	id "info.u_team.gradle_files"
	id "info.u_team.curse_gradle_uploader"
	id "maven-publish"
}

gradlefiles.loaderSuffix = "forge"

group = rootProject.group
archivesBaseName = gradlefiles.archivesBaseName()
version = gradlefiles.version()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	runs {
		client {
			workingDirectory file("run/client")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		server {
			workingDirectory file("run/server")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		data {
			workingDirectory file("run/data")
			
			args "--mod", config.mod.modid
			args "--all"
			args "--output", project(":common").file("src/common-generated/resources")
			args "--validate"
			args "--existing", project(":common").file("src/common/resources")
			
			property "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
			property "coremod.uteamcore.dataprovider-set-indent.value", "true"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	debug.verbose = true
	debug.export = true
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
	task.classpath = sourceSets.main.runtimeClasspath
}

gradlefiles.signDefaultForgeJar()

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs += "src/data/java"
			srcDirs += "src/integration/java"
			srcDirs += project(":common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += "src/integration/resources"
			srcDirs += project(":common").sourceSets.common.resources.srcDirs
		}
	}
}

repositories {
	maven {
		url = "https://maven.blamejared.com"
	}
	maven {
		url = "https://maven.theillusivec4.top"
	}
}

dependencies {
	minecraft gradlefiles.forgeDependency()
	
	implementation fg.deobf("info.u-team:u_team_core-forge-1.20.1:5.1.3.268")
	
	compileOnly fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge-api:${config.jei.version}")
	compileOnly fg.deobf("mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge:${config.jei.version}")
	
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${config.curios.version}:api")
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${config.curios.version}")
}

curseforge {
	apiKey = defaultPropertyValue("curseforge.token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.minecraft.version
		addGameVersion "Forge"
		addGameVersion "Java 17"
		
		relations {
			requiredDependency "u-team-core"
			optionalDependency "jei"
			optionalDependency "curios"
		}
		
		mainArtifact(tasks.getByName("jar")) {
			displayName = "${config.curse.display}-Forge-${config.minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${gradlefiles.changelogUrl()}\">Changelog of ${project.version}</a>"
		}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName
			
			from components.java
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
				}
			}
		}
	}
}
